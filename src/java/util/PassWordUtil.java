/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package util;

import de.mkammerer.argon2.Argon2;
import de.mkammerer.argon2.Argon2Factory;
import java.util.Scanner;

/**
 *
 * @author ADMIN
 */
public class PassWordUtil {
    private static final Argon2 ARGON2_INSTANCE = Argon2Factory.create(Argon2Factory.Argon2Types.ARGON2id);

    private static final int ITERATIONS = 2;
    private static final int MEMORY_COST = 19456; // 19MB
    private static final int PARALLELISM = 1;

    public static String hashPassword(String password) {
        char[] passwordChars = password.toCharArray();
        try {
            return ARGON2_INSTANCE.hash(ITERATIONS, MEMORY_COST, PARALLELISM, passwordChars);
        } finally {
            ARGON2_INSTANCE.wipeArray(passwordChars);
        }
    }
    public static boolean verifyPassword(String hash, String password) {
        char[] passwordChars = password.toCharArray();
        try {
            return ARGON2_INSTANCE.verify(hash, passwordChars);
        } finally {
            ARGON2_INSTANCE.wipeArray(passwordChars);
        }
    }

    public static boolean isValidPassword(String password) {
        String passwordPattern = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+\\-=\\[\\]{}|']).{8,64}$";
        return password != null && password.matches(passwordPattern);
    }

    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
            String passwordToHash;
            String hash;

            while (true) {
                System.out.print("‚å®Ô∏è Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ t·∫°o hash: ");
                passwordToHash = scanner.nextLine();

                if (isValidPassword(passwordToHash)) {
                    System.out.println("‚úÖ M·∫≠t kh·∫©u h·ª£p l·ªá. ƒêang ti·∫øn h√†nh hash...");
                    break; // Tho√°t kh·ªèi v√≤ng l·∫∑p n·∫øu m·∫≠t kh·∫©u h·ª£p l·ªá
                } else {
                    System.out.println("‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë·ªß m·∫°nh! Y√™u c·∫ßu: 8-64 k√Ω t·ª±, c√≥ ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë, v√† k√Ω t·ª± ƒë·∫∑c bi·ªát.");
                    System.out.println("   Vui l√≤ng th·ª≠ l·∫°i.\n");
                }
            }

            hash = hashPassword(passwordToHash);
            System.out.println("\n‚úÖ Hash ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
            System.out.println("   üîê M·∫≠t kh·∫©u g·ªëc   : " + passwordToHash);
            System.out.println("   üîë Hash ƒë·ªÉ l∆∞u tr·ªØ : " + hash);
            System.out.println("----------------------------------------");

            System.out.println("B√¢y gi·ªù, h√£y x√°c th·ª±c m·∫≠t kh·∫©u b·∫°n v·ª´a t·∫°o.");
            while (true) {
                System.out.print("‚å®Ô∏è Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u ƒë·ªÉ x√°c th·ª±c: ");
                String passwordToVerify = scanner.nextLine();
                if (verifyPassword(hash, passwordToVerify)) {
                    System.out.println("‚úÖ Tuy·ªát v·ªùi! X√°c th·ª±c th√†nh c√¥ng! M·∫≠t kh·∫©u kh·ªõp.");
                    break; // Tho√°t kh·ªèi v√≤ng l·∫∑p khi x√°c th·ª±c ƒë√∫ng
                } else {
                    System.out.println("‚ùå Sai r·ªìi! M·∫≠t kh·∫©u kh√¥ng kh·ªõp. Vui l√≤ng th·ª≠ l·∫°i.");
                }
            }
            System.out.println("Ch∆∞∆°ng tr√¨nh k·∫øt th√∫c.");
        }
    }
}
